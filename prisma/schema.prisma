datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Vote {
  UP
  DOWN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  createdSubreddits    Subreddit[] @relation("SubredditCreator")
  subscribedSubreddits Subreddit[] @relation("SubredditSubscribers")

  posts Post[]

  postVotes PostVote[]

  comments     Comment[]
  commentVotes CommentVote[]

  Session   Session[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Subreddit {
  id   String @id @default(cuid())
  name String

  creatorId String
  creator   User   @relation("SubredditCreator", fields: [creatorId], references: [id])

  subscribers User[] @relation("SubredditSubscribers")

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id      String @id @default(cuid())
  title   String
  content Json

  subredditId String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  votes PostVote[]

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostVote {
  postId String
  post   Post   @relation(fields: [postId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  vote Int

  @@id([postId, userId])
}

model Comment {
  id      String @id @default(cuid())
  content String

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  replyToId String?
  replyTo   Comment? @relation("replyTo", fields: [replyToId], references: [id])

  replies Comment[] @relation("replyTo")

  votes CommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentVote {
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  vote Int

  @@id([commentId, userId])
}
